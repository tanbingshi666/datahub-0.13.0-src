plugins {
  id 'java'
  id 'pegasus'
}

configurations {
  avro
}

dependencies {
  avro project(path: ':metadata-models', configuration: 'avroSchema')
  implementation project(':li-utils')
  implementation project(':metadata-events:mxe-avro')
  implementation project(':metadata-events:mxe-registration')
  implementation project(':metadata-events:mxe-utils-avro')
  implementation(project(':metadata-service:factories')) {
    exclude group: 'org.neo4j.test'
  }
  implementation externalDependency.springKafka
  implementation externalDependency.springActuator
  implementation externalDependency.slf4jApi
  compileOnly externalDependency.lombok
  annotationProcessor externalDependency.lombok
  runtimeOnly externalDependency.logbackClassic
  testImplementation externalDependency.mockito
  testRuntimeOnly externalDependency.logbackClassic
}

task avroSchemaSources(type: Copy) {
  dependsOn configurations.avro

  from { // use of closure defers evaluation until execution time
    configurations.avro.collect { zipTree(it) }
  }
  into("src/main/resources/")
  include("avro/com/linkedin/mxe/")
}

compileJava.dependsOn avroSchemaSources
processResources.dependsOn avroSchemaSources

clean {
  project.delete("src/main/resources/avro")
}